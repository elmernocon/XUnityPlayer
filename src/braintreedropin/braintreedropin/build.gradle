apply plugin: 'com.android.library'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"


    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // JAR and AAR dependencies
    compileOnly files('../../../refs/Unity/2019.2.6f1/classes.jar')
    compileOnly files('../../../refs/xplayer/com.unity3d.xplayer_latest.aar')

    // Braintree dependencies
    implementation 'com.braintreepayments.api:braintree:3.9.0'
    implementation 'com.braintreepayments.api:drop-in:4.5.0'
}

repositories {
    maven {
        url "https://cardinalcommerce.bintray.com/android"
        credentials {
            username 'braintree-team-sdk@cardinalcommerce'
            password '220cc9476025679c4e5c843666c27d97cfb0f951'
        }
    }
}

android.libraryVariants.all { variant ->

    // Get task names.
    String variantName = "${variant.name.capitalize()}" // 'Debug' or 'Release'
    String deployTaskGroup = "archive"
    String deployTaskName = "${deployTaskGroup}${variantName}" // 'archiveDebug' or 'archiveRelease'
    String dependencyTaskName = "assemble${variantName}" // 'assembleDebug' or 'assembleRelease'

    // Setup bundle name.
    String bundlePrefix = "com.synergy88."
    String bundleName = project.name
    String bundleFileType = "aar"
    String bundleIdentifier = "${bundlePrefix}${bundleName}.${bundleFileType}"

    // Get source paths.
    String sourceFolder = "${buildDir.getPath()}/outputs/${bundleFileType}/"
    String sourceFileName = "${bundleName}-${variant.name}.${bundleFileType}"

    // Get target paths.
    String pathToRepoFolder = "../.."
    String repoFolder = "${rootDir.getPath()}/${pathToRepoFolder}"
    String targetSubFolder = "bin/${variantName}/${bundleName}"
    String targetFolder = "${repoFolder}/${targetSubFolder}/"
    String targetFileName = bundleIdentifier


    // Create tasks.
    task(deployTaskName, dependsOn: dependencyTaskName, type: Copy) {
        from(sourceFolder)
        into(targetFolder)
        include(sourceFileName)
        rename(sourceFileName, targetFileName)
    }.group = deployTaskGroup

    // Log paths.
    println()
    println("! ${sourceFolder}${sourceFileName}")
    println("â†’ ${targetFolder}${targetFileName}")
}